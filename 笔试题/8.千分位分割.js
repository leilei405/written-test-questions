const str = "10000000000000";

// 解法一
// 思路：使用正则进行3位一组分割
// 题解：
// * `\B` 匹配一个非单词边界的位置。这确保了我们只在数字之间添加逗号，而不是在数字的开始或结束位置。
// * `(?=(\d{3})+(?!\d))` 是一个前瞻断言，它查找后面跟着至少三个数字的位置，这三个数字后面不能再有其他数字。
// * `g` 是全局标志，表示要替换所有匹配项，而不仅仅是第一个。
// * `.replace( ... , ",")` 使用该正则表达式将每三个数字之间替换为逗号。
function strSplit(str) {
  // 使用正则表达式将字符串中的每三个数字之间添加逗号
  const regex = str.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  // 返回处理后的字符串
  return regex;
}
console.log(strSplit(str), "==解法一==");

// 解法二
// 思路：split对字符串进行分割  然后进行循环
// 题解：
function strSplit2(str) {
  // 将字符串转换为字符数组
  const arr = str.split("");
  // 从数组倒数第三个元素开始，每隔三个元素插入一个逗号
  for (let i = arr.length - 3; i > 0; i -= 3) {
    arr.splice(i, 0, ",");
  }
  // 将字符数组转换回字符串并返回
  return arr.join("");
}

console.log(strSplit2(str), "==解法二==");
